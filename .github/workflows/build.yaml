name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  linux_build:
    name: Linux Flatpak Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Cache Flatpak dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/flatpak
        key: flatpak-${{ runner.os }}-${{ hashFiles('**/flatpak.lock') }}
        restore-keys: |
          flatpak-${{ runner.os }}-

    - name: Install Flatpak
      run: sudo apt install flatpak
      
    - name: Install Flatpak-builder
      run: sudo apt install flatpak-builder

    - name: Install Flatpak Runtime and SDK
      run: |
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install --noninteractive flathub org.kde.Platform//6.7
        sudo flatpak install --noninteractive flathub org.kde.Sdk//6.7

    - name: Build Flatpak
      run: |
        mkdir pyqt6
        flatpak-builder --repo=repo --force-clean build-dir io.github.FedericoCalzoni.EventRecorder.json
        flatpak build-export repo build-dir
        flatpak build-bundle repo EventRecorder.flatpak io.github.FedericoCalzoni.EventRecorder

    - name: Publish Flatpak Artifact
      uses: actions/upload-artifact@v2
      with:
        name: EventRecorder
        path: ./EventRecorder.flatpak

  windows_build:
    name: Windows Build
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-

    - name: Install dependencies
      run: pip install pyinstaller

    - name: Build Windows executable
      run: pyinstaller --onefile --noconsole .\EventRecorder\EventRecorder.py

    - name: Publish Windows Executable Artifact
      uses: actions/upload-artifact@v2
      with:
        name: EventRecorder
        path: .\dist\EventRecorder.exe

    - name: Move Windows Executable Artifact
      run: mv .\dist\EventRecorder.exe EventRecorder.exe

  release:
    name: Create Release
    needs: [linux_build, windows_build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run on the main branch

    steps:
    - name: Set release name
      id: set_release_name
      run: echo "RELEASE_NAME=$(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_NAME }}
        release_name: Release ${{ env.RELEASE_NAME }}
        draft: false
        prerelease: false

    - name: Change directory
      run: |
        cd $GITHUB_WORKSPACE
        pwd
        ls -la

    - name: List files in current directory
      run: ls -la

    - name: Upload Flatpak Artifact
      id: upload_flatpak
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ../EventRecorder.flatpak
        asset_name: EventRecorder.flatpak
        asset_content_type: application/x-flatpak

    - name: Upload Windows Executable Artifact
      id: upload_windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ../EventRecorder.exe
        asset_name: EventRecorder.exe
        asset_content_type: application/octet-stream
